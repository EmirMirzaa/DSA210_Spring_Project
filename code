import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import pytz

# Load the data
df = pd.read_csv('trips_data-0.csv')

# Initial exploration
print(df.head())
print(df.info())
print(df.describe())

# Convert datetime columns to datetime objects
datetime_cols = ['request_time', 'begin_trip_time', 'dropoff_time']
for col in datetime_cols:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col])
        
# Calculate trip duration for completed trips
df['trip_duration'] = (df['dropoff_time'] - df['begin_trip_time']).dt.total_seconds() / 60  # in minutes

# Extract time features
df['request_hour'] = df['request_time'].dt.hour
df['request_day_of_week'] = df['request_time'].dt.dayofweek  # Monday=0, Sunday=6
df['request_month'] = df['request_time'].dt.month

# Clean fare amount - remove rows with fare_amount = 0 (except for canceled trips)
df = df[(df['fare_amount'] > 0) | (df['status'] != 'completed')]

# Handle missing values
df['distance'].fillna(df['distance'].median(), inplace=True)

# Filter only completed trips for most analyses
completed_trips = df[df['status'] == 'completed'].copy()

# Bin distances into categories
completed_trips['distance_bin'] = pd.cut(completed_trips['distance'], 
                                       bins=[0, 2, 4, 6, 8, 10, 15, 20],
                                       labels=['0-2km', '2-4km', '4-6km', '6-8km', '8-10km', '10-15km', '15+km'])

# Plot trip duration by hour for different distance bins
plt.figure(figsize=(12, 6))
sns.boxplot(x='request_hour', y='trip_duration', hue='distance_bin', 
            data=completed_trips[completed_trips['distance_bin'].isin(['2-4km', '4-6km', '6-8km'])])
plt.title('Trip Duration by Hour of Day for Similar Distance Trips')
plt.xlabel('Hour of Day')
plt.ylabel('Trip Duration (minutes)')
plt.legend(title='Distance Bin')
plt.show()

# Scatter plot of distance vs fare
plt.figure(figsize=(10, 6))
sns.scatterplot(x='distance', y='fare_amount', data=completed_trips, alpha=0.5)
plt.title('Relationship Between Trip Distance and Fare')
plt.xlabel('Distance (km)')
plt.ylabel('Fare Amount (TRY)')
plt.show()

# Calculate correlation
correlation = completed_trips['distance'].corr(completed_trips['fare_amount'])
print(f"Correlation between distance and fare: {correlation:.2f}")

# Average fare per km
completed_trips['fare_per_km'] = completed_trips['fare_amount'] / completed_trips['distance']
print(f"Average fare per km: {completed_trips['fare_per_km'].mean():.2f} TRY/km")

# Average fare by hour
plt.figure(figsize=(12, 6))
sns.barplot(x='request_hour', y='fare_per_km', data=completed_trips)
plt.title('Average Fare per km by Hour of Day')
plt.xlabel('Hour of Day')
plt.ylabel('Average Fare per km (TRY/km)')
plt.show()

# Average fare by day of week
plt.figure(figsize=(10, 6))
sns.barplot(x='request_day_of_week', y='fare_per_km', data=completed_trips)
plt.title('Average Fare per km by Day of Week')
plt.xlabel('Day of Week (0=Monday, 6=Sunday)')
plt.ylabel('Average Fare per km (TRY/km)')
plt.show()

# Trip frequency by hour
plt.figure(figsize=(12, 6))
sns.countplot(x='request_hour', data=completed_trips)
plt.title('Trip Frequency by Hour of Day')
plt.xlabel('Hour of Day')
plt.ylabel('Number of Trips')
plt.show()

# Trip frequency by day of week
plt.figure(figsize=(10, 6))
sns.countplot(x='request_day_of_week', data=completed_trips)
plt.title('Trip Frequency by Day of Week')
plt.xlabel('Day of Week (0=Monday, 6=Sunday)')
plt.ylabel('Number of Trips')
plt.show()

# Calculate driver response time (time between request and trip start)
df['response_time'] = (df['begin_trip_time'] - df['request_time']).dt.total_seconds() / 60  # in minutes

# Plot response time by hour
plt.figure(figsize=(12, 6))
sns.boxplot(x='request_hour', y='response_time', 
            data=df[(df['status'] == 'completed') & (df['response_time'] < 30)])  # filter outliers
plt.title('Driver Response Time by Hour of Day')
plt.xlabel('Hour of Day')
plt.ylabel('Response Time (minutes)')
plt.show()

from scipy import stats

# Define peak and off-peak hours
completed_trips['is_peak'] = completed_trips['request_hour'].isin([8, 9, 10, 17, 18, 19])

# Compare fares
peak_fares = completed_trips[completed_trips['is_peak']]['fare_per_km']
off_peak_fares = completed_trips[~completed_trips['is_peak']]['fare_per_km']

# T-test
t_stat, p_value = stats.ttest_ind(peak_fares, off_peak_fares, equal_var=False)
print(f"T-test for fare difference between peak and off-peak hours:")
print(f"T-statistic: {t_stat:.2f}, P-value: {p_value:.4f}")

if p_value < 0.05:
    print("Reject null hypothesis - there is a significant difference in fares between peak and off-peak hours.")
else:
    print("Fail to reject null hypothesis - no significant difference in fares between peak and off-peak hours.")

# Define weekends (Saturday=5, Sunday=6)
completed_trips['is_weekend'] = completed_trips['request_day_of_week'].isin([5, 6])

# Compare durations
weekend_durations = completed_trips[completed_trips['is_weekend']]['trip_duration']
weekday_durations = completed_trips[~completed_trips['is_weekend']]['trip_duration']

# T-test
t_stat, p_value = stats.ttest_ind(weekend_durations, weekday_durations, equal_var=False)
print(f"\nT-test for duration difference between weekends and weekdays:")
print(f"T-statistic: {t_stat:.2f}, P-value: {p_value:.4f}")

if p_value < 0.05:
    print("Reject null hypothesis - there is a significant difference in trip durations between weekends and weekdays.")
else:
    print("Fail to reject null hypothesis - no significant difference in trip durations between weekends and weekdays.")
